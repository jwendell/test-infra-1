#!/bin/bash

# Copyright (C) 2020 Red Hat, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
set -u
set -o pipefail

function error() {
  echo "$@"
  exit 1
}


function usage() {
  echo "Creates a PR on rpm repository"
  echo
  echo "Usage: $0 <options>"
  echo
  echo "Options:"
  echo -e "  -o <org>\t\t GitHub organization. Mandatory."
  echo -e "  -r <repo>\t\t GitHub repository. Mandatory."
  echo -e "  -f <oauth-token-file>\t File that contains the GitHub oauth token. Mandatory."
  echo -e "  -c <command>\t\t Command to execute to generate the diff to be committed. Mandatory."
  echo -e "  -b <branch>\t\t Branch. Defaults to the same as the original repo."
  echo -e "  -l <label>\t\t Labels (comma-separated) to add to PR."
  echo -e "  -t <title>\t\t Title of PR. "

  if [ -n "${1:-}" ]  ; then
    echo -e "\n${1}"
    exit 1
  fi

  exit 0
}

function parse_args() {

  while getopts ":o:r:f:c:b:l:t:h" opt; do
    case ${opt} in
      o) ORG="${OPTARG}";;
      r) REPO="${OPTARG}";;
      f) TOKEN_FILE="${OPTARG}";;
      c) CMD="${OPTARG}";;
      b) BRANCH="${OPTARG}";;
      l) LABELS="${OPTARG}";;
      t) TITLE="${OPTARG}";;
      h) usage 0;;
      *) usage "Invalid command line argument. Aborting." ;;
    esac
  done

  shift $((OPTIND -1))
  if [ $# -ne 0 ]; then
    usage "Invalid command line argument. Aborting."
  fi

  validate_args
}

function validate_args() {
  [ -z "${ORG:-}" ] && usage "Missing organization"
  [ -z "${REPO:-}" ] && usage "Missing repository"
  [ -z "${CMD:-}" ] && usage "Missing command"
  [ -z "${TOKEN_FILE:-}" ] && usage "Missing token file"

  TOKEN="$(cat "${TOKEN_FILE}")"
  [ -z "${TOKEN}" ] && usage "Invalid token file"

  BRANCH="${BRANCH:-$(git describe --contains --all HEAD)}"
  TITLE="${TITLE:-Automator: Bump upstream}"
}

function fetch_gh_data() {
  local raw
  raw=$(curl -sSfLH "Authorization: token ${TOKEN}" https://api.github.com/user)

  GH_USER=$(echo "${raw}" | jq --raw-output .login)
  GH_EMAIL=$(echo "${raw}" | jq --raw-output .email)

  if [ -z "${GH_USER}" ] || [ -z "${GH_EMAIL}" ]; then
    error "Error fetching bot's data from GitHub"
  fi

  # Create a fork
  curl -XPOST -sSfLH "Authorization: token ${TOKEN}" "https://api.github.com/repos/${ORG}/${REPO}/forks" > /dev/null
}

function create_pr() {
  local fork_name="${1}"

  pr-creator \
    --github-token-path="${TOKEN_FILE}" \
    --org="${ORG}" \
    --repo="${REPO}" \
    --branch="${BRANCH}" \
    --title="${TITLE}" \
    --match-title="\"${TITLE}\"" \
    --body="Generated by Automator - $(date -uIseconds)" \
    --source="${GH_USER}:${fork_name}" \
    --confirm
}

function add_labels() {
  local pr="${1}"
  local json_labels

  if [ -n "${LABELS:-}" ]; then
    json_labels="$(echo "${LABELS}" | jq --raw-input --compact-output 'split(",")')"
    curl -XPOST -sSfLH "Authorization: token ${TOKEN}" "https://api.github.com/repos/${ORG}/${REPO}/issues/${pr}/labels" --data "{\"labels\": ${json_labels}}" >/dev/null
  fi
}

function commit_and_push() {
  local fork_name="${1}"

  git -c "user.name=${GH_USER}" -c "user.email=${GH_EMAIL}" commit --message "${TITLE}" --author="${GH_USER} <${GH_EMAIL}>"
  git show --shortstat
  git push --force "https://${GH_USER}:${TOKEN}@github.com/${GH_USER}/${REPO}.git" "HEAD:${fork_name}"
}

function do_work() {
  local pr
  local fork_name="automator-${BRANCH}"

  git clone --single-branch --branch "${BRANCH}" "https://github.com/${ORG}/${REPO}.git"
  cd "${REPO}"

  echo "Executing ${CMD}"
  ${CMD}
  git add .

  if git diff --cached --quiet --exit-code; then
    error "No diff was generated"
  fi

  commit_and_push "${fork_name}"
  pr=$(create_pr "${fork_name}")
  add_labels "${pr}"
}

function cleanup() {
  rm -rf "${TMP_DIR:-}"
}

main() {
  parse_args "$@"
  fetch_gh_data

  TMP_DIR=$(mktemp -d)
  cd "${TMP_DIR}"
  trap cleanup EXIT

  do_work
}

main "$@"
